import{_ as e,c as a,o as r,ae as d}from"./chunks/framework.DUP9kEI5.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/save-vram.md","filePath":"en/guide/save-vram.md"}'),i={name:"en/guide/save-vram.md"};function o(n,t,s,c,m,_){return r(),a("div",null,t[0]||(t[0]=[d('<h2 id="vram-optimization-guide" tabindex="-1">VRAM Optimization Guide <a class="header-anchor" href="#vram-optimization-guide" aria-label="Permalink to &quot;VRAM Optimization Guide&quot;">​</a></h2><h3 id="important-parameters-to-consider" tabindex="-1">Important Parameters to Consider <a class="header-anchor" href="#important-parameters-to-consider" aria-label="Permalink to &quot;Important Parameters to Consider&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Parameter</th><th>Purpose</th><th>Recommended Adjustment</th></tr></thead><tbody><tr><td><code>--per_device_train_batch_size</code></td><td>Training batch size per device</td><td>For low VRAM: 1-2, for high VRAM: 4 or higher</td></tr><tr><td><code>--per_device_eval_batch_size</code></td><td>Evaluation batch size per device</td><td>Same as above</td></tr><tr><td><code>--gradient_accumulation_steps</code></td><td>Gradient accumulation steps</td><td>Low VRAM: 4-16, high VRAM: reduce accordingly</td></tr></tbody></table>',3)]))}const l=e(i,[["render",o]]);export{p as __pageData,l as default};
