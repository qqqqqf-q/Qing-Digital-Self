import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.DUP9kEI5.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/convert-model.md","filePath":"guide/convert-model.md"}'),l={name:"guide/convert-model.md"};function h(n,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="编译-llama-cpp" tabindex="-1">编译 llama.cpp <a class="header-anchor" href="#编译-llama-cpp" aria-label="Permalink to &quot;编译 llama.cpp&quot;">​</a></h2><blockquote><p>下面三步都依赖于编译好的 llama.cpp</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/ggerganov/llama.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llama.cpp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DLLAMA_BUILD_EXAMPLES=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DLLAMA_NATIVE=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span></span></code></pre></div><hr><h2 id="huggingface-权重转-gguf" tabindex="-1">HuggingFace 权重转 GGUF <a class="header-anchor" href="#huggingface-权重转-gguf" aria-label="Permalink to &quot;HuggingFace 权重转 GGUF&quot;">​</a></h2><h3 id="命令格式" tabindex="-1">命令格式： <a class="header-anchor" href="#命令格式" aria-label="Permalink to &quot;命令格式：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./convert_hf_to_gguf.py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HF模型路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outfile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">输出GGUF路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">精度类</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">型</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>&lt;HF模型路径&gt;</code>：HuggingFace 格式模型目录（通常为微调或下载后的路径）</li><li><code>&lt;输出GGUF路径&gt;</code>：转换后生成的 <code>.gguf</code> 模型保存路径</li><li><code>&lt;精度类型&gt;</code>：精度类型，&#39;f32&#39;, &#39;f16&#39;, &#39;bf16&#39;, &#39;q8_0&#39;, &#39;tq1_0&#39;, &#39;tq2_0&#39;, &#39;auto&#39;</li></ul><h3 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> convert_hf_to_gguf.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/autodl-tmp/finetune/models/qwen3-8b-qlora/merged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/autodl-fs/qwen3-8b-fp16-agent.gguf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outtype</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f16</span></span></code></pre></div><hr><h2 id="量化模型" tabindex="-1">量化模型 <a class="header-anchor" href="#量化模型" aria-label="Permalink to &quot;量化模型&quot;">​</a></h2><h3 id="命令格式-1" tabindex="-1">命令格式： <a class="header-anchor" href="#命令格式-1" aria-label="Permalink to &quot;命令格式：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-quantize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">输入GGUF路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">输出GGUF路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">量化等</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">级</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>&lt;输入GGUF路径&gt;</code>：未量化的 <code>.gguf</code> 文件路径</li><li><code>&lt;输出GGUF路径&gt;</code>：量化后的 <code>.gguf</code> 文件保存路径</li><li><code>&lt;量化等级&gt;</code>：如 <code>Q4_0</code>、<code>Q4_K_M</code>、<code>Q8_0</code> 等，根据需求和硬件选择</li></ul><h3 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-quantize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /root/autodl-fs/qwen3-8b-fp16-agent.gguf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /root/autodl-fs/qwen3-8b-q8_0-agent.gguf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Q8_0</span></span></code></pre></div><hr><h2 id="_7-运行模型测试" tabindex="-1">7. 运行模型测试 <a class="header-anchor" href="#_7-运行模型测试" aria-label="Permalink to &quot;7. 运行模型测试&quot;">​</a></h2><h3 id="命令格式-2" tabindex="-1">命令格式： <a class="header-anchor" href="#命令格式-2" aria-label="Permalink to &quot;命令格式：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GGUF模型路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>&lt;GGUF模型路径&gt;</code>：你想测试的 GGUF 模型路径（可以是原始或量化后的）</li></ul><h3 id="示例-2" tabindex="-1">示例： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/autodl-fs/qwen3-8b-fp16-agent.gguf</span></span></code></pre></div><hr><h2 id="_8-从服务器上高速下载文件" tabindex="-1">8.从服务器上高速下载文件 <a class="header-anchor" href="#_8-从服务器上高速下载文件" aria-label="Permalink to &quot;8.从服务器上高速下载文件&quot;">​</a></h2><h2 id="可以直接从服务器提供商的数据存储中下载-就不用开机付费了" tabindex="-1">可以直接从服务器提供商的数据存储中下载,就不用开机付费了 <a class="header-anchor" href="#可以直接从服务器提供商的数据存储中下载-就不用开机付费了" aria-label="Permalink to &quot;可以直接从服务器提供商的数据存储中下载,就不用开机付费了&quot;">​</a></h2><h3 id="或者" tabindex="-1">或者 <a class="header-anchor" href="#或者" aria-label="Permalink to &quot;或者&quot;">​</a></h3><h3 id="命令格式-3" tabindex="-1">命令格式 <a class="header-anchor" href="#命令格式-3" aria-label="Permalink to &quot;命令格式&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lftp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {用户名},{密码}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {端口}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sftp://{服务器地址}-e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;set xfer:clobber true;  pget -n {线程数} {服务器文件路径} -o {本地文件名/路径}: bye&quot;</span></span></code></pre></div><ul><li><code>pget</code>: 使用多线程并行下载</li><li><code>-n</code> :指定线程数(建议64+)(甚至256线程会有更好的表现)</li></ul><h3 id="范例" tabindex="-1">范例 <a class="header-anchor" href="#范例" aria-label="Permalink to &quot;范例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lftp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root,askdjiwhakjd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27391</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sftp://yourserver.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;set xfer:clobber true; pget -n 256 /root/autodl-fs/qwen3-8b-fp16-agent.gguf -o qwen3-8b-fp16-agent.gguf; bye&quot;</span></span></code></pre></div><hr>`,34)]))}const c=i(l,[["render",h]]);export{g as __pageData,c as default};
