import{_ as s,c as i,o as e,ae as t}from"./chunks/framework.DUP9kEI5.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/convert-model.md","filePath":"en/guide/convert-model.md"}'),l={name:"en/guide/convert-model.md"};function h(n,a,p,o,d,r){return e(),i("div",null,a[0]||(a[0]=[t(`<h2 id="compile-llama-cpp" tabindex="-1">Compile llama.cpp <a class="header-anchor" href="#compile-llama-cpp" aria-label="Permalink to &quot;Compile llama.cpp&quot;">​</a></h2><blockquote><p>The following three steps depend on having <code>llama.cpp</code> compiled.</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/ggerganov/llama.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llama.cpp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DLLAMA_BUILD_EXAMPLES=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DLLAMA_NATIVE=ON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span></span></code></pre></div><hr><h2 id="convert-huggingface-weights-to-gguf" tabindex="-1">Convert HuggingFace Weights to GGUF <a class="header-anchor" href="#convert-huggingface-weights-to-gguf" aria-label="Permalink to &quot;Convert HuggingFace Weights to GGUF&quot;">​</a></h2><h3 id="command-format" tabindex="-1">Command format: <a class="header-anchor" href="#command-format" aria-label="Permalink to &quot;Command format:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./convert_hf_to_gguf.py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HF_model_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outfile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">output_GGUF_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">precision_typ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>&lt;HF_model_path&gt;</code>: Path to the HuggingFace format model directory (usually after fine-tuning or downloading).</li><li><code>&lt;output_GGUF_path&gt;</code>: Path where the converted <code>.gguf</code> model will be saved.</li><li><code>&lt;precision_type&gt;</code>: Precision type — <code>&#39;f32&#39;</code>, <code>&#39;f16&#39;</code>, <code>&#39;bf16&#39;</code>, <code>&#39;q8_0&#39;</code>, <code>&#39;tq1_0&#39;</code>, <code>&#39;tq2_0&#39;</code>, <code>&#39;auto&#39;</code>.</li></ul><h3 id="example" tabindex="-1">Example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> convert_hf_to_gguf.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/autodl-tmp/finetune/models/qwen3-8b-qlora/merged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/autodl-fs/qwen3-8b-fp16-agent.gguf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --outtype</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f16</span></span></code></pre></div><hr><h2 id="quantize-the-model" tabindex="-1">Quantize the Model <a class="header-anchor" href="#quantize-the-model" aria-label="Permalink to &quot;Quantize the Model&quot;">​</a></h2><h3 id="command-format-1" tabindex="-1">Command format: <a class="header-anchor" href="#command-format-1" aria-label="Permalink to &quot;Command format:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-quantize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">input_GGUF_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">output_GGUF_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">quantization_leve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>&lt;input_GGUF_path&gt;</code>: Path to the unquantized <code>.gguf</code> file.</li><li><code>&lt;output_GGUF_path&gt;</code>: Path where the quantized <code>.gguf</code> file will be saved.</li><li><code>&lt;quantization_level&gt;</code>: For example <code>Q4_0</code>, <code>Q4_K_M</code>, <code>Q8_0</code>, etc., depending on your needs and hardware.</li></ul><h3 id="example-1" tabindex="-1">Example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-quantize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /root/autodl-fs/qwen3-8b-fp16-agent.gguf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /root/autodl-fs/qwen3-8b-q8_0-agent.gguf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Q8_0</span></span></code></pre></div><hr><h2 id="_7-run-model-test" tabindex="-1">7. Run Model Test <a class="header-anchor" href="#_7-run-model-test" aria-label="Permalink to &quot;7. Run Model Test&quot;">​</a></h2><h3 id="command-format-2" tabindex="-1">Command format: <a class="header-anchor" href="#command-format-2" aria-label="Permalink to &quot;Command format:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GGUF_model_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>&lt;GGUF_model_path&gt;</code>: Path to the GGUF model you want to test (either original or quantized).</li></ul><h3 id="example-2" tabindex="-1">Example: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/bin/llama-run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/autodl-fs/qwen3-8b-fp16-agent.gguf</span></span></code></pre></div><hr><h2 id="_8-high-speed-file-download-from-server" tabindex="-1">8. High-Speed File Download from Server <a class="header-anchor" href="#_8-high-speed-file-download-from-server" aria-label="Permalink to &quot;8. High-Speed File Download from Server&quot;">​</a></h2><blockquote><p>You can download directly from your server provider’s storage without powering on (saving costs).</p></blockquote><h3 id="or-using-lftp" tabindex="-1">Or, using <code>lftp</code>: <a class="header-anchor" href="#or-using-lftp" aria-label="Permalink to &quot;Or, using \`lftp\`:&quot;">​</a></h3><p><strong>Command format:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lftp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {username},{password}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {port}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sftp://{server_address}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;set xfer:clobber true; pget -n {threads} {server_file_path} -o {local_file_name_or_path}; bye&quot;</span></span></code></pre></div><ul><li><code>pget</code>: Enables parallel download.</li><li><code>-n</code>: Number of threads (recommend 64+, even 256 for better performance).</li></ul><h3 id="example-3" tabindex="-1">Example: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lftp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root,askdjiwhakjd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27391</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sftp://yourserver.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;set xfer:clobber true; pget -n 256 /root/autodl-fs/qwen3-8b-fp16-agent.gguf -o qwen3-8b-fp16-agent.gguf; bye&quot;</span></span></code></pre></div>`,33)]))}const c=s(l,[["render",h]]);export{g as __pageData,c as default};
