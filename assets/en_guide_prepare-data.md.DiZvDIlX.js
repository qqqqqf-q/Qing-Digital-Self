import{_ as t,c as e,o as i,ae as s}from"./chunks/framework.DUP9kEI5.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/prepare-data.md","filePath":"en/guide/prepare-data.md"}'),o={name:"en/guide/prepare-data.md"};function n(l,a,r,h,d,p){return i(),e("div",null,a[0]||(a[0]=[s(`<h2 id="getting-qq-chat-data" tabindex="-1">Getting QQ Chat Data <a class="header-anchor" href="#getting-qq-chat-data" aria-label="Permalink to &quot;Getting QQ Chat Data&quot;">​</a></h2><ul><li>Tutorial reference: <a href="https://qq.sbcnm.top/decrypt/NTQQ%20%28Windows%29.html" target="_blank" rel="noreferrer">NTQQ Windows Data Decryption</a></li><li>Supplementary material: <a href="https://qq.sbcnm.top/decrypt/decode_db.html" target="_blank" rel="noreferrer">Database Decoding Reference</a></li><li>The above two are different chapters of the same tutorial, read them patiently, it&#39;s not complicated (if you don&#39;t know how, scroll to the bottom to find me)</li><li>Use DB Browser for SQLite, enter the 16-digit key you obtained as the password</li><li>HMAC algorithm is generally SHA1, some people use SHA512 and 256, test yourself, wrong algorithm will fail to open the database (so you need to test until it opens, you can also use AI to help you adapt)</li><li>In DB Browser <strong>export the SQL of <code>c2c_msg_table</code></strong></li><li>Create a new database, <strong>import the SQL file you just exported</strong></li><li>Get a database like this</li><li>Structure as shown below, it&#39;s a plaintext database (you can open it and see the data, which means it&#39;s normal)</li><li>Rename the database to <code>qq.db</code> and place it in the <code>dataset/original</code> folder</li></ul><blockquote><p>Or modify the <code>qq_db_path</code> in <code>setting.jsonc</code></p></blockquote><ul><li><img src="https://cdn.nodeimage.com/i/oBfbWfVLhJI0CeZHTwwxq6G7XGO40Vy4.webp" alt="Database Image"></li></ul><h2 id="getting-telegram-tg-chat-data" tabindex="-1">Getting Telegram (TG) Chat Data <a class="header-anchor" href="#getting-telegram-tg-chat-data" aria-label="Permalink to &quot;Getting Telegram (TG) Chat Data&quot;">​</a></h2><ul><li><p>Please use <a href="https://desktop.telegram.org/" target="_blank" rel="noreferrer">Telegram Desktop</a> to export chat data</p></li><li><p>Click the <code>Export chat history</code> button <img src="https://cdn.nodeimage.com/i/8PmL1yOyWbk1tTUkoLSk14sqrXN1HhYS.png" alt="8PmL1yOyWbk1tTUkoLSk14sqrXN1HhYS.png"></p></li><li><p>Select the <code>JSON(Machine-readable JSON)</code> button</p></li><li><p>No need to check other buttons, as this project does not support multimodal yet <img src="https://cdn.nodeimage.com/i/ZOx12BovPbYXo89k4xIF9yRlEamneq4g.png" alt="ZOx12BovPbYXo89k4xIF9yRlEamneq4g.png"></p></li><li><p>Move all <strong>ChatExport_</strong> folders from the export folder to the <code>dataset/original/</code> folder, as shown below <img src="https://cdn.nodeimage.com/i/zbc3iDHiqJrIOtWwrHkzX7TMONYatB8G.png" alt="zbc3iDHiqJrIOtWwrHkzX7TMONYatB8G"></p></li><li><p><strong>Important</strong></p></li><li><p>Modify the <code>setting.jsonc</code> file, change <code>telegram_chat_id</code> to your telegram chat id</p></li></ul><blockquote><p><strong>Including spaces!!!</strong></p></blockquote><ul><li>For example, if the following ID needs to be filled in as <code>qqqqq f</code></li></ul><hr><h2 id="getting-wechat-wx-chat-data" tabindex="-1">Getting WeChat (WX) Chat Data <a class="header-anchor" href="#getting-wechat-wx-chat-data" aria-label="Permalink to &quot;Getting WeChat (WX) Chat Data&quot;">​</a></h2><ul><li><p>Go to the <a href="https://github.com/SuxueCode/WechatBakTool" target="_blank" rel="noreferrer">WeChatBakTool Github project</a> and download the latest version from the releases page.</p></li><li><p>Or click here to download <a href="https://github.com/SuxueCode/WechatBakTool/releases/download/v0.9.7.6/WechatBakTool.zip" target="_blank" rel="noreferrer">WeChatBakTool</a>.</p></li><li><p>Go to <a href="https://github.com/tom-snow/wechat-windows-versions/releases" target="_blank" rel="noreferrer">this project</a> to download an older version of WeChat (v3.9.12.15).</p></li><li><p>Or click this link to quickly download <a href="https://github.com/tom-snow/wechat-windows-versions/releases/download/v3.9.12.15/WeChatSetup-3.9.12.15.exe" target="_blank" rel="noreferrer">WeChat</a>.</p></li><li><p>Install and log in to WeChat.</p></li><li><p>On your phone, go to <code>Settings - Chats - Chat History Migration &amp; Backup - Migrate - Migrate to PC/Mac</code> and proceed.</p></li><li><p>Unzip BakTool.</p></li><li><ol start="0"><li>Install .NET Desktop Runtime (note: this is the Desktop Runtime version 6.0; ignore if already installed).</li></ol></li><li><ol><li>Open and log in to WeChat.</li></ol></li><li><ol start="2"><li>At the bottom left of the software, click &quot;New Workspace&quot;.</li></ol></li><li><ol start="3"><li>In the &quot;New Workspace&quot; interface, select the WeChat process for which you want to create a workspace, and confirm that the WeChat ID below is correct.</li></ol></li><li><ol start="4"><li>For the decryption method, it is recommended to choose &quot;Username Inference Search&quot;! This method theoretically supports all 64-bit versions of WeChat. However, this mode requires ensuring the WeChat account is correct.</li></ol></li><li><ol start="5"><li>Beginners should ignore other options and directly click &quot;Create Workspace&quot;. The program will automatically create and decrypt the workspace.</li></ol></li><li><p>Right-click on the <code>Workspace</code> -&gt; <code>Manage</code>, export friend chats, all.</p></li><li><p>Go to the <code>baktool</code> folder, enter <code>workspace-[random_folder_name]-DecDB</code>.</p></li><li><p>Find all <code>MSG*.db</code> files, for example <code>MSG1.db</code>, and move them all to the <code>dataset/original/wechat</code> folder. <img src="https://cdn.nodeimage.com/i/TRbknJP4C4KkBsfTKBUN3CXJPPVagMaP.png" alt="TRbknJP4C4KkBsfTKBUN3CXJPPVagMaP.png"></p></li></ul><h2 id="optional-getting-chat-data-from-video-audio-files" tabindex="-1">(Optional) Getting Chat Data from Video/Audio Files <a class="header-anchor" href="#optional-getting-chat-data-from-video-audio-files" aria-label="Permalink to &quot;(Optional) Getting Chat Data from Video/Audio Files&quot;">​</a></h2><ul><li>Extract from dual-track video/audio (requires files with separated audio tracks)</li></ul><h3 id="_1-install-dependencies" tabindex="-1">1. Install Dependencies <a class="header-anchor" href="#_1-install-dependencies" aria-label="Permalink to &quot;1. Install Dependencies&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Automatically install all dependencies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process_data/chat_parser/video-to-chatml/start-vtc.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or install manually</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div><p><strong>Note</strong>: You also need to install ffmpeg:</p><ul><li>Windows: Download from <a href="https://ffmpeg.org" target="_blank" rel="noreferrer">https://ffmpeg.org</a> or use <code>choco install ffmpeg</code></li><li>Ubuntu: <code>sudo apt install ffmpeg</code></li><li>macOS: <code>brew install ffmpeg</code></li></ul><h3 id="_2-usage" tabindex="-1">2. Usage <a class="header-anchor" href="#_2-usage" aria-label="Permalink to &quot;2. Usage&quot;">​</a></h3><h4 id="interactive-mode-recommended-for-new-users" tabindex="-1">Interactive Mode (Recommended for new users) <a class="header-anchor" href="#interactive-mode-recommended-for-new-users" aria-label="Permalink to &quot;Interactive Mode (Recommended for new users)&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process_data/chat_parser/video-to-chatml/start-vtc.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span></span></code></pre></div><h4 id="direct-command-line-mode" tabindex="-1">Direct Command Line Mode <a class="header-anchor" href="#direct-command-line-mode" aria-label="Permalink to &quot;Direct Command Line Mode&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process_data/chat_parser/video-to-chatml/start-vtc.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> video.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base</span></span></code></pre></div><h4 id="using-main-program" tabindex="-1">Using Main Program <a class="header-anchor" href="#using-main-program" aria-label="Permalink to &quot;Using Main Program&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process_data/chat_parser/video-to-chatml/video-to-chatml.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> video.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base</span></span></code></pre></div><h3 id="parameter-description" tabindex="-1">Parameter Description <a class="header-anchor" href="#parameter-description" aria-label="Permalink to &quot;Parameter Description&quot;">​</a></h3><ul><li><code>video</code>: Input video file path</li><li><code>-u, --user-track</code>: User audio track index (default: 0)</li><li><code>-a, --assistant-track</code>: Assistant audio track index (default: 1)</li><li><code>-o, --output</code>: Output ChatML file path</li><li><code>-m, --model</code>: Whisper model size (tiny/base/small/medium/large, default: base)</li></ul><h3 id="whisper-model-selection" tabindex="-1">Whisper Model Selection <a class="header-anchor" href="#whisper-model-selection" aria-label="Permalink to &quot;Whisper Model Selection&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Model</th><th>Parameters</th><th>Memory Usage</th><th>Speed</th><th>Accuracy</th></tr></thead><tbody><tr><td>tiny</td><td>39M</td><td>~1GB</td><td>Fastest</td><td>Lowest</td></tr><tr><td>base</td><td>74M</td><td>~1GB</td><td>Fast</td><td>Low</td></tr><tr><td>small</td><td>244M</td><td>~2GB</td><td>Medium</td><td>Medium</td></tr><tr><td>medium</td><td>769M</td><td>~5GB</td><td>Slow</td><td>High</td></tr><tr><td>large</td><td>1550M</td><td>~10GB</td><td>Slowest</td><td>Highest</td></tr></tbody></table><h3 id="output-format" tabindex="-1">Output Format <a class="header-anchor" href="#output-format" aria-label="Permalink to &quot;Output Format&quot;">​</a></h3><p>The generated ChatML file format is as follows:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User&#39;s spoken content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assistant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Assistant&#39;s response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="common-issues" tabindex="-1">Common Issues <a class="header-anchor" href="#common-issues" aria-label="Permalink to &quot;Common Issues&quot;">​</a></h3><h3 id="_1-cuda-support" tabindex="-1">1. CUDA Support <a class="header-anchor" href="#_1-cuda-support" aria-label="Permalink to &quot;1. CUDA Support&quot;">​</a></h3><p>If you have an NVIDIA GPU, the program will automatically use CUDA acceleration. Check CUDA support:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process_data/chat_parser/video-to-chatml/start-vtc.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --check</span></span></code></pre></div><h3 id="_2-audio-track-recognition" tabindex="-1">2. Audio Track Recognition <a class="header-anchor" href="#_2-audio-track-recognition" aria-label="Permalink to &quot;2. Audio Track Recognition&quot;">​</a></h3><p>Using interactive mode allows you to view all audio track information in the video, helping you select the correct track index.</p><h3 id="_3-out-of-memory" tabindex="-1">3. Out of Memory <a class="header-anchor" href="#_3-out-of-memory" aria-label="Permalink to &quot;3. Out of Memory&quot;">​</a></h3><p>If you encounter memory issues, try using smaller Whisper models (like tiny or base).</p><h3 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h3><ul><li>Python 3.7+</li><li>openai-whisper</li><li>torch</li><li>ffmpeg-python</li><li>ffmpeg (system dependency)</li></ul><h3 id="supported-formats" tabindex="-1">Supported Formats <a class="header-anchor" href="#supported-formats" aria-label="Permalink to &quot;Supported Formats&quot;">​</a></h3><p><strong>Video Formats</strong>: MP4, MKV, AVI, MOV, WMV and other formats supported by ffmpeg <strong>Audio Codecs</strong>: Most common audio codecs (AAC, MP3, WAV, etc.)</p><h3 id="_2-todo-automatic-recognition-and-extraction-from-single-track-video-audio-not-implemented-yet" tabindex="-1">2. [TODO] Automatic recognition and extraction from single-track video/audio (not implemented yet) <a class="header-anchor" href="#_2-todo-automatic-recognition-and-extraction-from-single-track-video-audio-not-implemented-yet" aria-label="Permalink to &quot;2. [TODO] Automatic recognition and extraction from single-track video/audio (not implemented yet)&quot;">​</a></h3>`,44)]))}const u=t(o,[["render",n]]);export{k as __pageData,u as default};
